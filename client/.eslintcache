[{"D:\\React Practice\\ContactsApp\\client\\src\\index.js":"1","D:\\React Practice\\ContactsApp\\client\\src\\App.js":"2","D:\\React Practice\\ContactsApp\\client\\src\\reportWebVitals.js":"3","D:\\React Practice\\ContactsApp\\client\\src\\components\\layout\\Navbar.js":"4","D:\\React Practice\\ContactsApp\\client\\src\\components\\Pages\\Home.js":"5","D:\\React Practice\\ContactsApp\\client\\src\\components\\Pages\\About.js":"6","D:\\React Practice\\ContactsApp\\client\\src\\context\\contact\\ContactState.js":"7","D:\\React Practice\\ContactsApp\\client\\src\\context\\contact\\contactReducer.js":"8","D:\\React Practice\\ContactsApp\\client\\src\\context\\contact\\contactContext.js":"9","D:\\React Practice\\ContactsApp\\client\\src\\context\\types.js":"10","D:\\React Practice\\ContactsApp\\client\\src\\components\\contacts\\Contact.js":"11","D:\\React Practice\\ContactsApp\\client\\src\\components\\contacts\\ContactItem.js":"12","D:\\React Practice\\ContactsApp\\client\\src\\components\\contacts\\ContactForm.js":"13","D:\\React Practice\\ContactsApp\\client\\src\\components\\contacts\\ContactFilter.js":"14","D:\\React Practice\\ContactsApp\\client\\src\\context\\auth\\AuthState.js":"15","D:\\React Practice\\ContactsApp\\client\\src\\context\\auth\\authContext.js":"16","D:\\React Practice\\ContactsApp\\client\\src\\context\\auth\\authReducer.js":"17","D:\\React Practice\\ContactsApp\\client\\src\\components\\auth\\Register.js":"18","D:\\React Practice\\ContactsApp\\client\\src\\components\\auth\\Login.js":"19","D:\\React Practice\\ContactsApp\\client\\src\\context\\alert\\AlertState.js":"20","D:\\React Practice\\ContactsApp\\client\\src\\context\\alert\\alertContext.js":"21","D:\\React Practice\\ContactsApp\\client\\src\\context\\alert\\alertReducer.js":"22","D:\\React Practice\\ContactsApp\\client\\src\\components\\layout\\Alerts.js":"23","D:\\React Practice\\ContactsApp\\client\\src\\utils\\setAuthToken.js":"24","D:\\React Practice\\ContactsApp\\client\\src\\components\\routing\\PrivateRoute.js":"25","D:\\React Practice\\ContactsApp\\client\\src\\components\\layout\\Spinner.js":"26"},{"size":197,"mtime":1609767300247,"results":"27","hashOfConfig":"28"},{"size":1566,"mtime":1610453645927,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1606147166671,"results":"30","hashOfConfig":"28"},{"size":1686,"mtime":1610530631702,"results":"31","hashOfConfig":"28"},{"size":1227,"mtime":1610439348775,"results":"32","hashOfConfig":"28"},{"size":355,"mtime":1609773715674,"results":"33","hashOfConfig":"28"},{"size":4455,"mtime":1610549132212,"results":"34","hashOfConfig":"28"},{"size":2257,"mtime":1610549176983,"results":"35","hashOfConfig":"28"},{"size":113,"mtime":1609812637769,"results":"36","hashOfConfig":"28"},{"size":921,"mtime":1610532298027,"results":"37","hashOfConfig":"28"},{"size":2132,"mtime":1610544159022,"results":"38","hashOfConfig":"28"},{"size":1577,"mtime":1610545246627,"results":"39","hashOfConfig":"28"},{"size":2547,"mtime":1611298307014,"results":"40","hashOfConfig":"28"},{"size":888,"mtime":1610527297112,"results":"41","hashOfConfig":"28"},{"size":3674,"mtime":1610451514181,"results":"42","hashOfConfig":"28"},{"size":107,"mtime":1610174715107,"results":"43","hashOfConfig":"28"},{"size":1451,"mtime":1610451549747,"results":"44","hashOfConfig":"28"},{"size":2992,"mtime":1610526267997,"results":"45","hashOfConfig":"28"},{"size":2078,"mtime":1610447238583,"results":"46","hashOfConfig":"28"},{"size":1004,"mtime":1610335956360,"results":"47","hashOfConfig":"28"},{"size":112,"mtime":1610106300177,"results":"48","hashOfConfig":"28"},{"size":359,"mtime":1610336248982,"results":"49","hashOfConfig":"28"},{"size":622,"mtime":1610338820526,"results":"50","hashOfConfig":"28"},{"size":513,"mtime":1610437759284,"results":"51","hashOfConfig":"28"},{"size":610,"mtime":1610453599469,"results":"52","hashOfConfig":"28"},{"size":306,"mtime":1610511881780,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"pfqx6m",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\React Practice\\ContactsApp\\client\\src\\index.js",[],["112","113"],"D:\\React Practice\\ContactsApp\\client\\src\\App.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\reportWebVitals.js",[],["114","115"],"D:\\React Practice\\ContactsApp\\client\\src\\components\\layout\\Navbar.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\Pages\\Home.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\Pages\\About.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\context\\contact\\ContactState.js",["116","117"],"import React, { useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport ContactContext from './contactContext';\r\nimport ContactReducer from './contactReducer';\r\nimport {\r\n    GET_CONTACTS,\r\n    CLEAR_CONTACTS,\r\n    ADD_CONTACT,\r\n    CONTACT_ERROR,\r\n    DELETE_CONTACT,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT,\r\n    UPDATE_CONTACT,\r\n    FILTER_CONTACT,\r\n    CLEAR_FILTER\r\n} from '../types';\r\n\r\n//initial state\r\nconst ContactState = props => {\r\n    const initialState = {\r\n        //we need to fill this array from backend data\r\n        //for instance we are going to hardcode\r\n        // contacts : [],\r\n        contacts: null, // if the initial state an empty array it displays the message  please add a contact, not the spinner\r\n        current: null,\r\n        filtered: null, //this is going to be an array of filterd contacts\r\n        error: null,\r\n        loading: true\r\n\r\n    };\r\n    //pullout the state and dispatch from the reducer using reducer hook\r\n    //state allows to access the state\r\n    //dispatch allows to dispatch objects to the reducer\r\n    const [state, dispatch] = useReducer(ContactReducer, initialState);\r\n\r\n    //down here we gonna have all the actions\r\n\r\n    //get contacts\r\n    const getContacts = async () => {\r\n        try {\r\n            const res = await axios.get('/api/contacts');\r\n            dispatch({ type: GET_CONTACTS, payload: res.data });\r\n        } catch (err) {\r\n            dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\r\n        }\r\n    }\r\n\r\n    //add contact\r\n    const addContact = async (contact) => {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n                /* we're not going to set the token within the header, we set it globally */\r\n            }\r\n        }\r\n\r\n        try {\r\n            const res = await axios.post('/api/contacts', contact, config);\r\n            dispatch({\r\n                type: ADD_CONTACT,\r\n                payload: res.data\r\n            })\r\n        } catch (err) {\r\n            dispatch({ type: CONTACT_ERROR, payload: err.response.msg })\r\n        }\r\n\r\n    }\r\n    //delete contact\r\n    const deleteContact = async(id) => {\r\n\r\n        const config = {\r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n       try {\r\n        const res = await axios.delete(`/api/contacts/${id}`, config);\r\n        dispatch({ type: DELETE_CONTACT, payload: id });\r\n       } catch (err) {\r\n        dispatch({type: CONTACT_ERROR, payload : err.response.msg});\r\n       }\r\n    }\r\n\r\n    //clear contact\r\n    const clearContacts = () => {\r\n        dispatch({ type: CLEAR_CONTACTS })\r\n    }\r\n\r\n    //set current contact\r\n    const setCurrent = (contact) => {\r\n        dispatch({ type: SET_CURRENT, payload: contact });\r\n    }\r\n    //clear current contact\r\n    const clearCurrent = () => {\r\n        dispatch({ type: CLEAR_CURRENT })\r\n    }\r\n    //update contact\r\n    const updateContact = async(contact) => {\r\n\r\n        const config = {\r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n       try {\r\n        const res = await axios.put(`/api/contacts/${contact._id}`, contact, config)\r\n        dispatch({ type: UPDATE_CONTACT, payload: contact });\r\n       } catch (err) {\r\n         dispatch({type : CONTACT_ERROR, payload : err.response.msg})  \r\n       }\r\n    }\r\n    //filter contacts\r\n    const filterContact = (text) => {\r\n        dispatch({ type: FILTER_CONTACT, payload: text });\r\n    }\r\n    //clear filter\r\n    const clearFilter = () => {\r\n        dispatch({ type: CLEAR_FILTER })\r\n    }\r\n    //return provider => wrap our entire application\r\n    return (\r\n        <ContactContext.Provider\r\n            //these values are able to acces in any component\r\n            value={{\r\n                contacts: state.contacts,\r\n                current: state.current,\r\n                filtered: state.filtered,\r\n                error: state.error,\r\n                addContact,\r\n                deleteContact,\r\n                setCurrent,\r\n                clearCurrent,\r\n                updateContact,\r\n                filterContact,\r\n                clearFilter,\r\n                getContacts,\r\n                clearContacts\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ContactContext.Provider>\r\n    )\r\n    //inorder to use this we have to wrap our main App.js\r\n};\r\n\r\nexport default ContactState;","D:\\React Practice\\ContactsApp\\client\\src\\context\\contact\\contactReducer.js",["118"],"import {\r\n    GET_CONTACTS,\r\n    CLEAR_CONTACTS,\r\n    ADD_CONTACT,\r\n    CONTACT_ERROR,\r\n    DELETE_CONTACT,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT,\r\n    UPDATE_CONTACT,\r\n    FILTER_CONTACT,\r\n    CLEAR_FILTER\r\n} from '../types';\r\n\r\nexport default (state, action) => {\r\n    switch(action.type){\r\n\r\n        case GET_CONTACTS:\r\n            return{\r\n                ...state,\r\n                contacts : action.payload,\r\n                loading : false\r\n            }\r\n\r\n        case ADD_CONTACT : \r\n        return{\r\n            ...state,//get the current state from ContactState\r\n            contacts : [action.payload, ...state.contacts],//\r\n            loading : false\r\n        }\r\n\r\n        case CONTACT_ERROR :\r\n            return{\r\n                ...state,\r\n                error : action.payload\r\n            }\r\n\r\n        case DELETE_CONTACT :\r\n        return{\r\n            ...state,\r\n            contacts : state.contacts.filter(contact=>contact._id !== action.payload),\r\n            loading : false\r\n        }\r\n\r\n        case CLEAR_CONTACTS:\r\n            return{\r\n              ...state,\r\n              contacts:null,\r\n              filtered : null,\r\n              error : null,\r\n              current : null  \r\n            }\r\n        \r\n        case SET_CURRENT :\r\n        return{\r\n            ...state,\r\n            current :  action.payload\r\n        }\r\n\r\n        case  CLEAR_CURRENT :\r\n        return{\r\n            ...state,\r\n            current : null\r\n        } \r\n        \r\n        case UPDATE_CONTACT :\r\n            return{\r\n                ...state,\r\n                contacts : state.contacts.map(contact=>contact._id===action.payload._id? action.payload : contact),\r\n                loading : false\r\n            }\r\n\r\n        case FILTER_CONTACT :\r\n            return{\r\n                ...state,\r\n                filtered : state.contacts.filter(contact=>{\r\n                    const regex = new RegExp(`${action.payload}`, 'gi');\r\n                    return contact.name.match(regex) || contact.email.match(regex);\r\n                })\r\n            };\r\n            \r\n        case CLEAR_FILTER :\r\n            return{\r\n                ...state,\r\n                filtered : null\r\n            }    \r\n\r\n        default : \r\n        return state;\r\n    }\r\n}","D:\\React Practice\\ContactsApp\\client\\src\\context\\contact\\contactContext.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\context\\types.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\contacts\\Contact.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\contacts\\ContactItem.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\contacts\\ContactForm.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\contacts\\ContactFilter.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\context\\auth\\AuthState.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\context\\auth\\authContext.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\context\\auth\\authReducer.js",["119"],"import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    CLEAR_ERRORS\r\n} from '../types';\r\n\r\nexport default (state, action)=>{\r\n    switch(action.type){\r\n\r\n        case USER_LOADED :\r\n        return{\r\n            ...state,\r\n            isAuthenticated : true,\r\n            loading : false,\r\n            user : action.payload\r\n        }\r\n\r\n        case REGISTER_SUCCESS :\r\n        case LOGIN_SUCCESS : //same effect as the register     \r\n        //if register success, need couple of thing to do\r\n        //1. get the token and store it in the local storage\r\n        localStorage.setItem('token', action.payload.token);\r\n        return {\r\n            ...state,\r\n            ...action.payload,\r\n            isAuthenticated : true,\r\n            loading : false\r\n        }\r\n\r\n        case REGISTER_FAIL :\r\n        case AUTH_ERROR :\r\n        case LOGIN_FAIL : //same effect as the register fail\r\n        case LOGOUT :         \r\n        //remove the token\r\n        localStorage.removeItem('token');\r\n        return {\r\n            ...state,\r\n            token : null,\r\n            isAuthenticated : false,\r\n            loading : false,\r\n            user : null,\r\n            error : action.payload\r\n        }\r\n\r\n        case CLEAR_ERRORS :\r\n        return {\r\n            ...state,\r\n            error : null,\r\n        }\r\n\r\n        default :\r\n        return  state;\r\n    }\r\n}","D:\\React Practice\\ContactsApp\\client\\src\\components\\auth\\Register.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\auth\\Login.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\context\\alert\\AlertState.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\context\\alert\\alertContext.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\context\\alert\\alertReducer.js",["120"],"import {\r\n    SET_ALERT,\r\n    REMOVE_ALERT\r\n} from '../types';\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case SET_ALERT : \r\n        return [...state, action.payload];\r\n\r\n        case REMOVE_ALERT :\r\n            return state.filter(alert=>alert.id !== action.payload)\r\n\r\n        default : \r\n            return state;\r\n    }\r\n};","D:\\React Practice\\ContactsApp\\client\\src\\components\\layout\\Alerts.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\utils\\setAuthToken.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\routing\\PrivateRoute.js",[],"D:\\React Practice\\ContactsApp\\client\\src\\components\\layout\\Spinner.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"121","replacedBy":"125"},{"ruleId":"123","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":78,"column":15,"nodeType":"129","messageId":"130","endLine":78,"endColumn":18},{"ruleId":"127","severity":1,"message":"128","line":108,"column":15,"nodeType":"129","messageId":"130","endLine":108,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":14,"column":1,"nodeType":"133","endLine":90,"endColumn":2},{"ruleId":"131","severity":1,"message":"132","line":12,"column":1,"nodeType":"133","endLine":59,"endColumn":2},{"ruleId":"131","severity":1,"message":"132","line":6,"column":1,"nodeType":"133","endLine":17,"endColumn":3},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],["134"],["135"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]